name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - 'feature/*'
  pull_request:
    branches:
      - main

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      build_env: ${{ steps.set-env.outputs.build_env }}
    steps:
      - name: Determine BUILD_ENV
        id: set-env
        run: |
          case "${GITHUB_REF_NAME}" in
          main)
            echo "build_env=prod" >> $GITHUB_OUTPUT
            ;;
          dev)
            echo "build_env=dev" >> $GITHUB_OUTPUT
            ;;
          feature/*)
            echo "build_env=feature" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "build_env=other" >> $GITHUB_OUTPUT
            ;;
          esac
          echo "üîç BUILD_ENV determined: $(cat $GITHUB_OUTPUT | grep build_env | cut -d'=' -f2)"

  ci:
    runs-on: ubuntu-latest
    needs: set-environment
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests with coverage
        run: ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification

      - name: Show coverage summary
        run: |
          echo "=== Jacoco Coverage Summary ==="
          grep -A 3 '<counter type="LINE"' build/reports/jacoco/test/jacocoTestReport.xml || true

      ##TODO : Î¶¨Ìè¨Ìä∏ ÏûëÏÑ±

      - name: Build JAR
        if: github.ref_name == 'main' || github.ref_name == 'dev'
        run: ./gradlew build

      - name: Build & Push Docker Image with Jib
        if: github.ref_name == 'main' || github.ref_name == 'dev'
        env:
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BUILD_ENV: ${{ needs.set-environment.outputs.build_env }}
        run: |
          echo "üê≥ Building and pushing Docker image with tag: ${BUILD_ENV}"
          ./gradlew jib

  cd:
    runs-on: ubuntu-latest
    needs: [set-environment, ci]
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - name: Deploy to Synology NAS
        uses: appleboy/ssh-action@v1.0.3
        env:
          BUILD_ENV: ${{ needs.set-environment.outputs.build_env }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üõ∞Ô∏è  Î∞∞Ìè¨ ÏãúÏûë..."
            echo "üì¶ Docker Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏: ${{ needs.set-environment.outputs.build_env }}"
            export PATH=$PATH:/usr/local/bin
            docker pull ${{ secrets.DOCKER_REGISTRY_URL }}/wedsnap:${{ needs.set-environment.outputs.build_env }}
            docker stop wedsnap || true
            docker rm wedsnap || true
            docker run -d --name wedsnap \
              -p 8080:8080 \
              ${{ secrets.DOCKER_REGISTRY_URL }}/wedsnap:${{ needs.set-environment.outputs.build_env }}
            echo "‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å!"
