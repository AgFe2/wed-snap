name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - 'feature/*'
  pull_request:
    branches:
      - main

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      build_env: ${{ steps.set-env.outputs.build_env }}
    steps:
      - name: Determine BUILD_ENV
        id: set-env
        run: |
          case "${GITHUB_REF_NAME}" in
          main)
            echo "build_env=prod" >> $GITHUB_OUTPUT
            ;;
          dev)
            echo "build_env=dev" >> $GITHUB_OUTPUT
            ;;
          feature/*)
            echo "build_env=feature" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "build_env=other" >> $GITHUB_OUTPUT
            ;;
          esac
          echo "🔍 BUILD_ENV determined: $(cat $GITHUB_OUTPUT | grep build_env | cut -d'=' -f2)"

  ci:
    runs-on: ubuntu-latest
    needs: set-environment
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests with coverage
        run: ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification


      - name: Jacoco Report Summary
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "🧪 Test Coverage Report"
          update-comment: true
          min-coverage-overall: 30
          min-coverage-changed-files: 30
          skip-if-no-changes: false
          continue-on-error: true

      - name: Upload Jacoco HTML report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html

      - name: Build JAR
        run: ./gradlew build

      - name: Build & Push Docker Image with Jib
        if: github.ref_name == 'main' || github.ref_name == 'dev'
        env:
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BUILD_ENV: ${{ needs.set-environment.outputs.build_env }}
        run: |
          echo "🐳 Building and pushing Docker image with tag: ${BUILD_ENV}"
          ./gradlew jib

  cd:
    runs-on: ubuntu-latest
    needs: [set-environment, ci]
    if: github.ref_name == 'main' || github.ref_name == 'dev'
    steps:
      - name: Deploy to Synology NAS
        uses: appleboy/ssh-action@v1.0.3
        env:
          BUILD_ENV: ${{ needs.set-environment.outputs.build_env }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "🛰️  배포 시작..."
            BUILD_ENV="${{ needs.set-environment.outputs.build_env }}"
            echo "📦 Docker 이미지 태그: ${BUILD_ENV}"

            # 환경별 설정
            if [ "${BUILD_ENV}" = "prod" ]; then
              CONTAINER_NAME="wedsnap-prod"
              HOST_PORT="8080"
              DOMAIN="wedsnap.agfe2.synology.me"
            elif [ "${BUILD_ENV}" = "dev" ]; then
              CONTAINER_NAME="wedsnap-dev"
              HOST_PORT="8081"
              DOMAIN="wedsnap-dev.agfe2.synology.me"
            fi

            echo "🔧 환경: ${BUILD_ENV}"
            echo "📦 컨테이너: ${CONTAINER_NAME}"
            echo "🔌 포트: ${HOST_PORT}:8080"
            echo "🌐 도메인: https://${DOMAIN}"

            export PATH=$PATH:/usr/local/bin

            # 최신 이미지 Pull
            echo "📥 이미지 다운로드 중..."
            docker pull ${{ secrets.DOCKER_REGISTRY_URL }}/wedsnap:${BUILD_ENV}

            # 기존 컨테이너 중지 및 삭제
            echo "🛑 기존 컨테이너 정리 중..."
            docker stop ${CONTAINER_NAME} 2>/dev/null || true
            docker rm ${CONTAINER_NAME} 2>/dev/null || true

            # 새 컨테이너 시작
            echo "🚀 새 컨테이너 시작 중..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              --restart=unless-stopped \
              -p ${HOST_PORT}:8080 \
              ${{ secrets.DOCKER_REGISTRY_URL }}/wedsnap:${BUILD_ENV}

            # 컨테이너 상태 확인
            sleep 3
            if docker ps | grep -q ${CONTAINER_NAME}; then
              echo "✅ 배포 완료!"
              echo "✅ 컨테이너: ${CONTAINER_NAME}"
              echo "✅ 접속 URL: https://${DOMAIN}"
            else
              echo "❌ 배포 실패: 컨테이너가 실행되지 않았습니다."
              docker logs ${CONTAINER_NAME}
              exit 1
            fi